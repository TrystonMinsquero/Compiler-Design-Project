
import java_cup.runtime.*;

import java_cup.runtime.*;

terminal CLASS;           //2
terminal AND;             //3
terminal ELSE;            //4
terminal IF;              //5
terminal WHILE;           //6
terminal READ;            //7
terminal PRINT;           //8
terminal PRINTLN;         //9
terminal RETURN;          //10
terminal OR;              //11
terminal TIMES;           //12
terminal PLUS;            //13
terminal PLUSPLUS;        //14
terminal MINUS;           //15
terminal MINUSMINUS;      //16
terminal PREFIXPLUS;      //17
terminal PREFIXMINUS;     //18
terminal DIVIDE;          //19
terminal SEMI;            //20
terminal LEFT_PAREN;      //21
terminal RT_PAREN;        //22
terminal LEFT_BRACE;      //23
terminal RT_BRACE;        //24
terminal LEFT_BRKT;       //25
terminal RT_BRKT;         //26
terminal EQ;              //27
terminal GTR;             //28
terminal LESS;            //29
terminal LESS_EQ;         //30
terminal GTR_EQ;          //31
terminal NOT_EQ;          //32
terminal NOT;             //33
terminal CONDITION;       //34
terminal COLON;           //35
terminal ASSMNT;          //36
terminal COMMA;           //37
terminal FINAL;           //38
terminal VOID;            //39
terminal TRUE;            //40
terminal FALSE;           //41

terminal String INT;      //42
terminal String FLOAT;    //43
terminal String BOOL;     //44
terminal String CHAR;     //45

terminal String ID;       //46
terminal Integer INTLIT;  //47
terminal Float FLOATLIT;  //48
terminal String CHARLIT;  //49
terminal String STRINGLIT;//50

non terminal Class program; //50
non terminal FieldDeclarations fieldDeclarations;
non terminal FieldDeclaration fieldDeclaration;
non terminal MethodDeclarations methodDeclarations;
non terminal MethodDeclaration methodDeclaration;
non terminal ArgDeclarations argDeclarations;
non terminal ArgDeclaration argDeclaration;
non terminal Statements statements; //51
non terminal Statement statement; //52
non terminal OptionalElseStatement ifEnd; //53
non terminal Name name; //54
non terminal Args args; //55
non terminal NameArgs readList; //56
non terminal Args printList; //57
non terminal Args printlineList; //58
non terminal Expression expression; //59
// non terminal Expression optionalExpression; //60
non terminal LiteralExpression literalExpression; //60
non terminal BinaryExpression binaryExpression; //61
non terminal UnaryExpression unaryExpression; //62
non terminal String optionalSemi;
// non terminal String optionalFinal;
non terminal String type;
non terminal String returnType;

precedence right CONDITION, COLON;
precedence left OR;
precedence left AND;
precedence left NOT_EQ, EQ;
precedence left LESS, GTR, LESS_EQ, GTR_EQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left LEFT_PAREN, RT_PAREN;
precedence right PREFIXPLUS, PREFIXMINUS, NOT, PLUSPLUS, MINUSMINUS;
precedence left LEFT_PAREN, RT_PAREN, LEFT_BRKT, RT_BRKT;

program ::= CLASS ID:id LEFT_BRACE fieldDeclarations:fd methodDeclarations:md RT_BRACE
    {: RESULT = new Class(id, fd, md); :}
;

fieldDeclarations ::= fieldDeclaration:fd fieldDeclarations:fds
    {: RESULT = (FieldDeclarations) fds.prepend(fd); :}
    |
    {: RESULT = new FieldDeclarations(); :}
;

fieldDeclaration ::= 
    FINAL INT ID:id SEMI
    {: RESULT = new FieldDeclaration("int", id, "final", null); :}
    |
    FINAL FLOAT ID:id SEMI
    {: RESULT = new FieldDeclaration("float", id, "final", null); :}
    |
    FINAL BOOL ID:id SEMI
    {: RESULT = new FieldDeclaration("bool", id, "final", null); :}
    |
    FINAL CHAR ID:id SEMI
    {: RESULT = new FieldDeclaration("char", id, "final", null); :}
    ;
//     |
//     INT ID:id LEFT_BRKT INTLIT:i RT_BRKT SEMI
//     {: RESULT = new FieldDeclaration("int", id, new IntLiteralExpression(i)); :}
//     |
//     FLOAT ID:id LEFT_BRKT INTLIT:i RT_BRKT SEMI
//     {: RESULT = new FieldDeclaration("float", id, new IntLiteralExpression(i)); :}
//     |
//     BOOL ID:id LEFT_BRKT INTLIT:i RT_BRKT SEMI
//     {: RESULT = new FieldDeclaration("bool", id, new IntLiteralExpression(i)); :}
//     |
//     CHAR ID:id LEFT_BRKT INTLIT:i RT_BRKT SEMI
//     {: RESULT = new FieldDeclaration("char", id, new IntLiteralExpression(i)); :}
// ;
/*
{: RESULT = new FieldDeclaration(t, id, "final", oe); :}
    |
    FINAL type:t ID:id SEMI
    {: RESULT = new FieldDeclaration(t, id, "final", null); :}
    |
    type:t ID:id ASSMNT expression:oe SEMI
    {: RESULT = new FieldDeclaration(t, id, "", oe); :}
    |
    type:t ID:id SEMI
    {: RESULT = new FieldDeclaration(t, id, "", null); :}
    |
    type:t ID:id LEFT_BRKT INTLIT:i RT_BRKT SEMI
    {: RESULT = new FieldDeclaration(t, id, new IntLiteralExpression(i)); :}    
*/

/*
INT ID:id optionalExpression:oe SEMI
    {: RESULT = new FieldDeclaration("int", id, "", oe); :}
    |
    FLOAT ID:id optionalExpression:oe SEMI
    {: RESULT = new FieldDeclaration("float", id, "", oe); :}
    |
    BOOL ID:id optionalExpression:oe SEMI
    {: RESULT = new FieldDeclaration("bool", id, "", oe); :}
    |
    CHAR ID:id optionalExpression:oe SEMI
    {: RESULT = new FieldDeclaration("char", id, "", oe); :}
    |
    INT ID:id LEFT_BRKT INTLIT:i RT_BRKT SEMI
    {: RESULT = new FieldDeclaration("int", id, i new IntLiteralExpression(i)); :}
    |
    FLOAT ID:id LEFT_BRKT INTLIT:i RT_BRKT SEMI
    {: RESULT = new FieldDeclaration("float", id, i new IntLiteralExpression(i)); :}
    |
    BOOL ID:id LEFT_BRKT INTLIT:i RT_BRKT SEMI
    {: RESULT = new FieldDeclaration("bool", id, i new IntLiteralExpression(i)); :}
    |
    CHAR ID:id LEFT_BRKT INTLIT:i RT_BRKT SEMI
    {: RESULT = new FieldDeclaration("char", id, i new IntLiteralExpression(i)); :}
*/

methodDeclarations ::= methodDeclaration:md methodDeclarations:mtds
    {: RESULT = (MethodDeclarations) mtds.prepend(md); :}
    |
    {: RESULT = new MethodDeclarations(); :}
;

methodDeclaration ::= returnType:t ID:id LEFT_PAREN argDeclarations:ads RT_PAREN LEFT_BRACE fieldDeclarations:fds statements:sts RT_BRACE optionalSemi:os
    {: RESULT = new MethodDeclaration(t, id, ads, fds, sts, os); :}
    |
    returnType:t ID:id LEFT_PAREN RT_PAREN LEFT_BRACE fieldDeclarations:fds statements:sts RT_BRACE optionalSemi:os
    {: RESULT = new MethodDeclaration(t, id, new ArgDeclarations(), fds, sts, os); :}
;

argDeclarations ::= argDeclaration:ad COMMA argDeclarations:ads
    {: RESULT = (ArgDeclarations) ads.prepend(ad); :}
    | argDeclaration:ad
    {: RESULT = new ArgDeclarations(ad); :}
;

argDeclaration ::= type:t ID:id
    {: RESULT = new ArgDeclaration(t, id); :}
    type:t ID:id LEFT_BRKT RT_BRKT
    {: RESULT = new ArgDeclaration(t, id, true); :}
;

statements ::= statement:s statements:sl
    {: RESULT = sl.prepend(s); :}
    |
    {: RESULT = new Statements(); :}
;

statement ::= 
    name:n ASSMNT expression:e SEMI
    {: RESULT = new AssignStatement(n, e); :}
    |
    IF LEFT_PAREN expression:e RT_PAREN LEFT_BRACE statements:s RT_BRACE ifEnd:ie
    {: RESULT = new IfStatement(e, s, ie); :}
    |
    WHILE LEFT_PAREN expression:e RT_PAREN LEFT_BRACE statements:s RT_BRACE
    {: RESULT = new WhileStatement(e, s); :}
    |
    ID:id LEFT_PAREN RT_PAREN SEMI
    {: RESULT = new CallStatement(id); :}
    |
    ID:id LEFT_PAREN args:a RT_PAREN SEMI
    {: RESULT = new CallStatement(id, a); :}
    |
    RETURN SEMI
    {: RESULT = new ReturnStatement(); :}
    |
    RETURN expression:e SEMI
    {: RESULT = new ReturnStatement(e); :}
    |
    READ LEFT_PAREN readList:rl RT_PAREN SEMI
    {: RESULT = new ReadStatement(rl); :}
    |
    PRINTLN LEFT_PAREN printlineList:pll RT_PAREN SEMI
    {: RESULT = new CallStatement("printline", pll); :}
    |
    PRINT LEFT_PAREN printList:pl RT_PAREN SEMI
    {: RESULT = new CallStatement("print", pl); :}
    |
    name:n PLUSPLUS SEMI
    {: RESULT = new AddToStatement(n, new IntLiteralExpression(1)); :}
    |
    name:n MINUSMINUS SEMI
    {: RESULT = new AddToStatement(n, new IntLiteralExpression(-1)); :}
    |
    LEFT_BRACE statements:s RT_BRACE optionalSemi:os
    {: RESULT = new BlockStatement(s, os); :}
;

optionalSemi ::= SEMI
    {: RESULT = ";"; :}
    |
    {: RESULT = ""; :}
;

// optionalFinal ::= FINAL
//     {: RESULT = "final"; :}
//     |
//     {: RESULT = ""; :}
// ;

type ::= INT:i
    {: RESULT = "int"; :}
    |
    FLOAT:f
    {: RESULT = "float"; :}
    |
    BOOL:b
    {: RESULT = "bool"; :}
    |
    CHAR:c
    {: RESULT = "char"; :}
;

returnType ::= type:t
    {: RESULT = t; :}
    |
    VOID:v
    {: RESULT = "void"; :}
;

ifEnd ::= ELSE LEFT_BRACE statements:s RT_BRACE
    {: RESULT = new OptionalElseStatement(s); :}
    |
    {: RESULT = new OptionalElseStatement(); :}
;


name ::= ID:id
    {: RESULT = new Name(id); :}
    |
    ID:id LEFT_BRKT expression:e RT_BRKT
    {: RESULT = new Name(id, e); :}
;

args ::= expression:e COMMA args:a
    {: RESULT = a.prepend(e); :}
    |
    expression:e
    {: RESULT = new Args(e); :}
;

readList ::= name:n COMMA readList:rl
    {: RESULT = rl.prepend(n); :}
    |
    name:n
    {: RESULT = new NameArgs(n); :}
;

printList ::= expression:e COMMA printList:pl
    {: RESULT = pl.prepend(e); :}
    |
    expression:e
    {: RESULT = new Args(e); :}
;

printlineList ::= expression:e COMMA printlineList:pll
    {: RESULT = pll.prepend(e); :}
    |
    expression:e
    {: RESULT = new Args(e); :}
    |
    {: RESULT = new Args(); :}
;

literalExpression ::= name:n
    {: RESULT = new LiteralExpression(n); :}
    |
    FLOATLIT:f
    {: RESULT = new FloatLiteralExpression(f); :}
    |
    INTLIT:i
    {: RESULT = new IntLiteralExpression(i); :}
    |
    CHARLIT:c
    {: RESULT = new LiteralExpression(c, "char"); :}
    |
    STRINGLIT:s
    {: RESULT = new LiteralExpression(s, "string"); :}
    |
    TRUE
    {: RESULT = new LiteralExpression(true); :}
    |
    FALSE
    {: RESULT = new LiteralExpression(false); :}
;

expression ::= literalExpression:e
    {: RESULT = e; :}
    |
    ID:id LEFT_PAREN RT_PAREN
    {: RESULT = new FunctionalExpression(id); :}
    |
    ID:id LEFT_PAREN args:a RT_PAREN
    {: RESULT = new FunctionalExpression(id, a); :}
    |
    LEFT_PAREN expression:e RT_PAREN
    {: RESULT = e; :}
    |
    LEFT_PAREN type:t RT_PAREN expression:e
    {: RESULT = new CastExpression(t, e); :}
    |
    unaryExpression:e
    {: RESULT = e; :}
    |
    binaryExpression:e
    {: RESULT = e; :}
    |
    expression:co CONDITION expression:e1 COLON expression:e2
    {: RESULT = new TernaryExpression(co, e1, e2); :}
;

// optionalExpression ::= ASSMNT expression:e
//     {: RESULT = e; :}
//     |
//     {: RESULT = null; :}
// ;

binaryExpression ::= expression:e1 TIMES expression:e2
    {: RESULT = new BinaryExpression("*", e1, e2); :}
    |
    expression:e1 DIVIDE expression:e2
    {: RESULT = new BinaryExpression("/", e1, e2); :}
    |
    expression:e1 PLUS expression:e2
    {: RESULT = new BinaryExpression("+", e1, e2); :}
    |
    expression:e1 MINUS expression:e2
    {: RESULT = new BinaryExpression("-", e1, e2); :}
    |
    expression:e1 LESS expression:e2
    {: RESULT = new BinaryExpression("<", e1, e2); :}
    |
    expression:e1 GTR expression:e2
    {: RESULT = new BinaryExpression(">", e1, e2); :}
    |
    expression:e1 LESS_EQ expression:e2
    {: RESULT = new BinaryExpression("<=", e1, e2); :}
    |
    expression:e1 GTR_EQ expression:e2
    {: RESULT = new BinaryExpression(">=", e1, e2); :}
    |
    expression:e1 EQ expression:e2
    {: RESULT = new BinaryExpression("==", e1, e2); :}
    |
    expression:e1 NOT_EQ expression:e2
    {: RESULT = new BinaryExpression("<>", e1, e2); :}
    |
    expression:e1 OR expression:e2
    {: RESULT = new BinaryExpression("||", e1, e2); :}
    |
    expression:e1 AND expression:e2
    {: RESULT = new BinaryExpression("&&", e1, e2); :}
;

unaryExpression ::= NOT expression:e
    {: RESULT = new UnaryExpression("~", e); :}
    |
    MINUS expression:e
    {: RESULT = new UnaryExpression("-", e); :} %prec PREFIXMINUS
    |
    PLUS expression:e
    {: RESULT = new UnaryExpression("+", e); :} %prec PREFIXPLUS
;