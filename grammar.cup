
import java_cup.runtime.*;

terminal COMMENT;   //2
terminal CLASS;     //3
terminal VOID;      //4
terminal INT;       //5
terminal FLOAT;     //6
terminal BOOL;      //7
terminal CHAR;      //8
terminal FINAL;     //9 
terminal IF;        //10
terminal ELSE;      //11
terminal WHILE;     //12
terminal RETURN;    //13
terminal PRINTLINE; //14
terminal PRINT;     //15
terminal READ;      //16
terminal LBRACE;    //17
terminal RBRACE;    //18
terminal SEMI;      //19
terminal LPAREN;    //20
terminal RPAREN;    //21
terminal LBRACKET;  //22
terminal RBRACKET;  //23
terminal ASTERISK;  //24
terminal SLASH;     //25
terminal PLUS;      //26
terminal PREPLUS;   //26.5
terminal MINUS;     //27
terminal PREMINUS;  //27.5
terminal LTHAN;     //28
terminal GTHAN;     //29
terminal LTHANEQ;   //30
terminal GTHANEQ;   //31
terminal EQUAL;     //32
terminal NOTEQUAL;  //33
terminal NOT;       //34
terminal QUESTION;  //35
terminal OR;        //36
terminal AND;       //37
terminal INCREMENT; //38
terminal DECREMENT; //39
terminal ASSIGN;    //40
terminal COLON;     //41
terminal COMMA;     //42
terminal TRUE;      //43
terminal FALSE;     //44

terminal String ID; //45
terminal Float FLOATLIT; //46
terminal Integer INTLIT; //47
terminal String CHARLIT; //48
terminal String STRINGLIT; //49


non terminal Program program; //50
non terminal Statements statements; //51
non terminal Statement statement; //52
non terminal OptionalElseStatement ifEnd; //53
non terminal Name name; //54
non terminal Args args; //55
non terminal NameArgs readList; //56
non terminal Args printList; //57
non terminal Args printlineList; //58
non terminal Expression expression; //59
non terminal String binaryOperator; //60
non terminal String optionalSemi; //61
non terminal String type; //62

precedence right QUESTION, COLON;
precedence left OR;
precedence left AND;
precedence left NOTEQUAL, EQUAL;
precedence left LTHAN, GTHAN, LTHANEQ, GTHANEQ;
precedence left PLUS, MINUS;
precedence left ASTERISK, SLASH;
precedence left LPAREN, RPAREN;
precedence right PREPLUS, PREMINUS, NOT, INCREMENT, DECREMENT;
precedence left LPAREN, RPAREN, LBRACKET, RBRACKET;

program ::= statements:s 
    {: RESULT = new Program(s); :}
;

statements ::= statement:s statements:sl
    {: RESULT = sl.prepend(s); :}
    |
    {: RESULT = new Statements(); :}
;

statement ::= 
    name:n ASSIGN expression:e SEMI
    {: RESULT = new AssignStatement(n, e); :}
    |
    IF LPAREN expression:e RPAREN LBRACE statements:s RBRACE ifEnd:ie
    {: RESULT = new IfStatement(e, s, ie); :}
    |
    WHILE LPAREN expression:e RPAREN LBRACE statements:s RBRACE
    {: RESULT = new WhileStatement(e, s); :}
    |
    ID:id LPAREN RPAREN SEMI
    {: RESULT = new CallStatement(id); :}
    |
    ID:id LPAREN args:a RPAREN SEMI
    {: RESULT = new CallStatement(id, a); :}
    |
    RETURN SEMI
    {: RESULT = new ReturnStatement(); :}
    |
    RETURN expression:e SEMI
    {: RESULT = new ReturnStatement(e); :}
    |
    READ LPAREN readList:rl RPAREN SEMI
    {: RESULT = new ReadStatement(rl); :}
    |
    PRINT LPAREN printList:pl RPAREN SEMI
    {: RESULT = new CallStatement("print", pl); :}
    |
    PRINTLINE LPAREN printlineList:pll RPAREN SEMI
    {: RESULT = new CallStatement("printline", pll); :};
//     |
//     name INCREMENT SEMI
//     {: RESULT = new AddStatement(n, 1); :}
//     |
//     name DECREMENT SEMI
//     {: RESULT = new AddStatement(n, -1); :}
//     |
//     LBRACE statements:s RBRACE optionalSemi:os
//     {: RESULT = new BlockStatement(statements); :}
// ;

// optionalSemi ::= SEMI:s
//     {: RESULT = s :}
//     |
//     {: RESULT = ""; :}
// ;

type ::= INT:i
    {: RESULT = "int"; :}
    |
    FLOAT:f
    {: RESULT = "float"; :}
    |
    BOOL:b
    {: RESULT = "bool"; :}
    |
    CHAR:c
    {: RESULT = "char"; :}
;

ifEnd ::= ELSE LBRACE statements:s RBRACE
    {: RESULT = new OptionalElseStatement(s); :}
    |
    {: RESULT = new OptionalElseStatement(); :}
;


name ::= ID:id
    {: RESULT = new Name(id); :}
    |
    ID:id LBRACKET expression:e RBRACKET
    {: RESULT = new Name(id, e); :}
;

args ::= expression:e COMMA args:a
    {: RESULT = a.prepend(e); :}
    |
    expression:e
    {: RESULT = new Args(e); :}
;

readList ::= name:n COMMA readList:rl
    {: RESULT = rl.prepend(n); :}
    |
    name:n
    {: RESULT = new NameArgs(n); :}
;

printList ::= expression:e COMMA printList:pl
    {: RESULT = pl.prepend(e); :}
    |
    expression:e
    {: RESULT = new Args(e); :}
;

printlineList ::= printList:pl
    {: RESULT = pl; :}
    |
    {: RESULT = new Args(); :}
;

expression ::= name:n
    {: RESULT = new LiteralExpression(n); :}
    |
    ID:id LPAREN RPAREN
    {: RESULT = new FunctionalExpression(id); :}
    |
    ID:id LPAREN args:a RPAREN
    {: RESULT = new FunctionalExpression(id, a); :}
    |
    FLOATLIT:f
    {: RESULT = new FloatLiteralExpression(f); :}
    |
    INTLIT:i
    {: RESULT = new IntLiteralExpression(i); :}
    |
    CHARLIT:c
    {: RESULT = new LiteralExpression(String.valueOf(c), "char"); :}
    |
    STRINGLIT:s
    {: RESULT = new LiteralExpression(String.valueOf(s), "string"); :}
    |
    TRUE
    {: RESULT = new LiteralExpression(true); :}
    |
    FALSE
    {: RESULT = new LiteralExpression(false); :}
    |
    LPAREN expression:e RPAREN
    {: RESULT = e; :}
    |
    LPAREN type:t RPAREN expression:e
    {: RESULT = new CastExpression(t, e); :}
    |
    expression:e1 binaryOperator:bo expression:e2
    {: RESULT = new BinaryExpression(bo, e1, e2); :}
    |
    expression:co QUESTION expression:e1 COLON expression:e2
    {: RESULT = new TernaryExpression(co, e1, e2); :}
    |
    NOT expression:e
    {: RESULT = new UnaryExpression("~", e); :}
    |
    MINUS expression:e
    {: RESULT = new UnaryExpression("-", e); :} %prec PREMINUS
    |
    PLUS expression:e
    {: RESULT = new UnaryExpression("+", e); :} %prec PREPLUS
;

binaryOperator ::= ASTERISK
    {: RESULT = "*"; :}
    |
    SLASH
    {: RESULT = "/"; :}
    |
    PLUS
    {: RESULT = "+"; :}
    |
    MINUS
    {: RESULT = "-"; :}
    |
    LTHAN
    {: RESULT = "<"; :}
    |
    GTHAN
    {: RESULT = ">"; :}
    |
    LTHANEQ
    {: RESULT = "<="; :}
    |
    GTHANEQ
    {: RESULT = ">="; :}
    |
    EQUAL
    {: RESULT = "=="; :}
    |
    NOTEQUAL
    {: RESULT = "<>"; :}
    |
    OR
    {: RESULT = "||"; :}
    |
    AND
    {: RESULT = "&&"; :}
;








